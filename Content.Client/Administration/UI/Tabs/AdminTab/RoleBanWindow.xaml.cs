using Content.Shared.Administration;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.LineEdit;
using System.Linq;

namespace Content.Client.Administration.UI.Tabs.AdminTab
{
    [GenerateTypedNameReferences]
    [UsedImplicitly]
    public sealed partial class RoleBanWindow : DefaultWindow
    {
        private readonly List<string> _jobsName = new() {"Captain", "HeadOfPersonnel", "HeadOfSecurity", "ChiefMedicalOfficer", "ChiefEngineer", "Quartermaster", "ResearchDirector", "Warden", "SecurityOfficer", "Detective", "SecurityCadet", "Chemist", "MedicalDoctor", "Psychologist", "MedicalIntern", "AtmosphericTechnician", "StationEngineer", "TechnicalAssistant", "CargoTechnician", "SalvageSpecialist", "Scientist", "ServiceWorker", "Bartender", "Chef", "Botanist", "Clown", "Mime", "Chaplain", "Librarian", "Lawyer", "Janitor", "Musician", "Reporter", "Zookeeper"};
        public RoleBanWindow()
        {
            RobustXamlLoader.Load(this);
            OnNamesChanged();
            PlayerNameLine.OnTextChanged += _ => OnNamesChanged();
            MinutesLine.OnTextChanged += UpdateButtonsText;
            RoleNameLine.OnTextChanged += _ => OnNamesChanged();
            PlayerList.OnSelectionChanged += OnPlayerSelectionChanged;
            SubmitByNameButton.OnPressed += SubmitByNameButtonOnPressed;
            SubmitListButton.OnPressed += SubmitListButtonOnPressed;
            MinutesLine.OnTextChanged += UpdateButtonsText;
            HourButton.OnPressed += _ => AddMinutes(60);
            DayButton.OnPressed += _ => AddMinutes(1440);
            WeekButton.OnPressed += _ => AddMinutes(10080);
            MonthButton.OnPressed += _ => AddMinutes(43200);
        }

        private bool TryGetMinutes(string str, out uint minutes)
        {
            if(string.IsNullOrWhiteSpace(str))
            {
                minutes = 0;
                return true;
            }

            return uint.TryParse(str, out minutes);
        }

        private void AddMinutes(uint add)
        {
            if (!TryGetMinutes(MinutesLine.Text, out var minutes))
                return;

            MinutesLine.Text = $"{minutes + add}";
            UpdateButtons(minutes+add);
        }

        private void UpdateButtonsText(LineEditEventArgs obj)
        {
            if (!TryGetMinutes(obj.Text, out var minutes))
                return;
            UpdateButtons(minutes);
        }

        private void UpdateButtons(uint minutes)
        {
            HourButton.Text = $"+1h ({minutes / 60})";
            DayButton.Text = $"+1d ({minutes / 1440})";
            WeekButton.Text = $"+1w ({minutes / 10080})";
            MonthButton.Text = $"+1M ({minutes / 43200})";
        }

        private void OnNamesChanged()
        {
            if (string.IsNullOrEmpty(PlayerNameLine.Text) == false && string.IsNullOrEmpty(RoleNameLine.Text) == false)
            {
                SubmitByNameButton.Disabled = false;
            }
            else
            {
                SubmitByNameButton.Disabled = true;
            }
            SubmitListButton.Disabled = string.IsNullOrEmpty(PlayerNameLine.Text);
        }

        private void OnPlayerSelectionChanged(PlayerInfo? player)
        {
            PlayerNameLine.Text = player?.Username ?? string.Empty;
            OnNamesChanged();
        }

        private void SubmitByNameButtonOnPressed(BaseButton.ButtonEventArgs obj)
        {
            // Small verification if Player Name exists
            IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
                $"roleban \"{PlayerNameLine.Text}\" \"{RoleNameLine.Text}\" \"{CommandParsing.Escape(ReasonLine.Text)}\" \"{MinutesLine.Text}\"");
        }
        private void SubmitListButtonOnPressed(BaseButton.ButtonEventArgs obj)
        {
            foreach (var name in from name in _jobsName let control = FindControl<CheckBox>(name) where control.Pressed select name)
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
                    $"roleban \"{PlayerNameLine.Text}\" \"{name}\" \"{CommandParsing.Escape(ReasonLine.Text)}\" \"{MinutesLine.Text}\"");
            }
        }
    }
}
